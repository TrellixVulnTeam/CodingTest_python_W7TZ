<그래프 vs 트리>

- 트리는 특수한 형태의 그래프의 일종, (트리 < 그래프) 
- 트리는 순환구조 (cyclic)를 가지지않음
(그래프는 단방향, 양방향 모두 가리킬 수 있지만, 트리는 단방향만 가능 즉, 부모노드에서 자식노드만을 가리킬 뿐임)
- 트리는 하나의 부모노드만을 가짐
- 트리는 하나의 루트만을 가짐


<트리>
가장 널리 사용되는 트리 자료구조 : 이진트리, 이진탐색트리(Binary Search Tree)
- 각 노드가 m개 이하의 자식을 가지고 있으면, m-ary 트리(=다항트리, 다진트리)라고 하는데 이때, m=2일 때 즉, 모든 노드의
차수가 2개이하일 때는 특별히 이진트리라고 구분해서 말함. 

<이진트리>
정 이진트리(full) : 모든 노드가 0개 또는 2개의 자식을 가짐
완전 이진트리(complete) : 마지막 레벨을 제외하고 모든 레벨이 완전히 채워져 있으며, 마지막 레벨의 모든 노드는 가장 왼쪽부터 채워져 있음
포화 이진트리(perfect) : 모든 노드가 2개의 자식노드를 갖고 있으며 모든 리프노드가 동일한 깊이, 레벨을 가짐. 


* 트리구조 각 명칭 : 

항상 루트노드부터 시작하여 자식노드를 가지고, 간선(Edge)으로 이루어짐 
현재노드 : D

                      A    (루트노드, 레벨 : 0)
1    |      
                  B      C (레벨 : 1, A노드의 자식노드 : B,C 서로를 형제노드라고 부름,  부모노드와 자식노드는 간선(Edge,link)로 연결됨
2    |    
              D   E   F  G  (레벨 : 2, 자식노드의 개수 : 차수(Degree), 자기자신을 포함해 이후의 모든 자식노드의 개수 : 크기(Size))
3    |    
             H  I  (리프노드(=단말노드, 자식이 없는 노드) H,I : 레벨 : 3)   

# 높이(Height) : 루트노드 ~ 리프노드까지의 최대 길이 = 3
# 깊이(Depth) : 루트노드 ~ 현재노드(D)까지의 길이 = 2
# 트리의 차수 : 각 노드의 차수 중, 가장 큰 값 

* BST(Binary Search Tree, 이진탐색트리)
: 간단히 말해서 정렬된 트리, 노드의 왼쪽 서브트리에는 노드보다 작은 값이, 
노드의 오른쪽 서브트리에는 노드보다 큰 값이 있는 노드들로 구성됨.
탐색시 시간복잡도 : O(nlog(n)) 

* 트리 순회
- 전위순회(Pre-Order) : NLR, 현재노드 - 현재노드의 왼쪽 서브트리 - 현재노드의 오른쪽 서브트리 
- 중위순회(In-Order) : LNR, 현재노드의 왼쪽 서브트리 - 현재노드 - 현재노드의 오른쪽 서브트리
- 후외순회(Post-Order) : LRN, 현재노드의 왼쪽 서브트리 - 현재노드의 오른쪽 서브트리 - 현재노드


                      F
             B               G
        A        D                 I
              C     E            H


전위순회 : F B A D C E G I H 
중위순회 : A B C D E F G H I
후위순회 : A C E D B H I G F 



